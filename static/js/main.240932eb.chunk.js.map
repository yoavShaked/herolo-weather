{"version":3,"sources":["actions/types.js","constants/apiDetails.js","apiRequests/getDailyForcast.js","apiRequests/getLocationAutocomplete.js","apiRequests/getLocationCurrentWeather.js","reducers/weatherReducer.js","constants/titles.js","utils/degrees.js","reducers/forcastReducer.js","reducers/configReducer.js","reducers/favoritesReducer.js","reducers/root.js","middlewares/asyncMiddleware.js","middlewares/loggerMiddleware.js","actions/httpRquest.js","actions/weather.js","middlewares/initialForcastMiddleware.js","store.js","components/Flexbox.js","components/SwitchLabels.js","components/Config.js","actions/config.js","components/Nevigationbar/styled-components.js","components/Nevigationbar/index.js","utils/hooks.js","components/Toast.js","containers/SearchInput/styled-components.js","containers/SearchInput/index.js","components/ForcastSkelaton.js","components/Icon.js","containers/WeeklyForcast/styled-components.js","containers/WeeklyForcast/index.js","components/ToggledComponent.js","containers/FavoriteAction/index.js","actions/favorites.js","containers/Forcast/styled-components.js","containers/Forcast/index.js","components/Home.js","containers/Favorites/styled-components.js","containers/Favorites/FavoriteItem.js","containers/Favorites/index.js","RouteConfig.js","Main.js","App.js","index.js"],"names":["createAsyncActionType","type","START","RESOLVED","ERROR","GET_DAILY_FORCAST","GET_LOCATION_AUTOCOMPLETE","SET_INITIAL_FORCAST","ADD_TO_FAVORITES","apiKey","url","getForcast","cityId","metric","_url","fetch","then","res","json","getLocationAutocomplete","locationQuery","getLocationCurrentWeather","locationId","initialState","isLoading","suggestedLocations","errorMessage","TABS","DAY_TIME","UNIT_TYPE","convertToF","value","convertToC","roundToOneDecimalNumberAfterPoint","number","Math","round","convertDegreeValue","dest","flow","weatherForcast","cityName","description","fetchForcast","onDailyForcast","payload","meta","set","map","Date","Day","Night","Temperature","date","temperature","unit","get","max","min","unitType","favorites","mapFavoriteWeather","recivedWeather","iconId","currentTemperature","windSpeed","windDirction","weatherTitle","tempratureSummary","visibilty","combineReducers","weather","state","action","types","newState","forcast","mapTemperature","weatherItem","config","isArray","asyncMiddleware","store","next","httpAction","endpoint","data","dispatch","catch","err","logger","console","log","getState","HTTP_ACTION","Object","assign","getDailyForcast","weatherRequestsApi","initialForcast","configureStore","createStore","rootReducer","applyMiddleware","loggerMiddelware","initialForcasrMiddleware","Flexbox","styled","div","flexDirection","width","height","SwitchLabels","checkedLabel","uncheckedLabel","afterChange","useState","checked","label","setState","FormControlLabel","control","Switch","onChange","event","target","isFunction","name","color","connect","setUnitType","Container","pathCode","Nevigationbar","isClient","window","getSize","innerWidth","undefined","innerHeight","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","windowLocationPathName","_","trim","location","pathname","pathCodeValue","setValue","dropDownMenu","className","to","Typography","Tabs","newValue","Tab","Toast","severity","context","Alert","defaultProps","StyledAutocomplete","Autocomplete","ToastContainer","mapOption","option","SerachInput","options","placeholder","notValid","setNotValid","onInputChange","debounce","test","allowdInputValue","find","freeSolo","renderInput","params","TextField","margin","variant","weatherActions","SkelatonContainer","SkelatonWeatherContainer","ForcastSkelaton","Skeleton","Icon","props","img","WeatherItemContainer","dayTime","index","minTemperature","maxTemperature","key","Tooltip","title","ToggledComponent","initialValue","OnComponent","OffComponent","onClick","toggle","setToggle","Component","isFavorite","addToFavorites","removeFromFavorites","toggledValue","FavoriteIcon","FavoriteBorderIcon","ActionsContainer","setInitialForcast","setDayTime","currentFullTime","moment","format","Home","SearchInput","WeatherItemRow","FavoriteItem","weatherObject","_unitType","minTempreature","currentTemperatureValue","windDircection","temperatureSummary","getWeatherData","isRedirect","setRedircet","onClickFavorite","isMetric","favoriteWeather","RouteConfig","exact","path","component","Favorites","Main","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.240932eb.chunk.js","sourcesContent":["const createAsyncActionType = (type) => ({\r\n  START: `${type}_START`,\r\n  RESOLVED: `${type}_RESOLVED`,\r\n  ERROR: `${type}_ERROR`,\r\n});\r\n\r\n//weather\r\nexport const GET_DAILY_FORCAST = createAsyncActionType(\"GET_DAILY_FORCAST\");\r\nexport const GET_CURRENT_WEATHER = createAsyncActionType(\"GET_CURRENT_WEATHER\");\r\nexport const GET_LOCATION_AUTOCOMPLETE = createAsyncActionType(\"GET_LOCATION_AUTOCOMPLETE\");\r\nexport const SET_INITIAL_FORCAST = createAsyncActionType(\"SET_INITIAL_FORCAST\");\r\n\r\n//config\r\nexport const SET_DEGREE_UNIT_TYPE = \"SET_DEGREE_UNIT_TYPE\";\r\nexport const SET_DAY_TIME = \"SET_DAY_TIME\";\r\n\r\n//favorites\r\nexport const ADD_TO_FAVORITES = createAsyncActionType(\"ADD_TO_FAVORITES\");\r\nexport const REMOVE_FROM_FAVORITES = \"REMOVE_FROM_FAVORITES\";\r\n\r\n","export const apiKey = \"YFxhPdzDyzUxsJ2CzWAM83fAMVcGeQj5\";\r\nexport const url = \"http://dataservice.accuweather.com\";\r\n\r\n","import { apiKey, url } from \"../constants/apiDetails\";\r\n\r\nconst getForcast = (cityId, metric) => () => {\r\n  const _url = `${url}/forecasts/v1/daily/5day/${cityId}?apikey=${apiKey}&details=true&metric=${metric}`;\r\n  return fetch(_url).then((res) => res.json());\r\n}\r\n\r\nexport default getForcast;","import { apiKey, url } from \"../constants/apiDetails\";\r\n\r\nconst getLocationAutocomplete = (locationQuery) => () => {\r\n  const _url = `${url}/locations/v1/cities/autocomplete?apikey=${apiKey}&q=${locationQuery}`;\r\n  return fetch(_url).then((res) => res.json());\r\n}\r\n\r\nexport default getLocationAutocomplete;\r\n","import { apiKey, url } from \"../constants/apiDetails\";\r\n\r\nconst getLocationCurrentWeather = (locationId) => () => {\r\n  const _url = `${url}/currentconditions/v1/${locationId}?apikey=${apiKey}&details=true`;\r\n  return fetch(_url).then((res) => res.json());\r\n}\r\n\r\nexport default getLocationCurrentWeather;","import { set, flow, get } from \"lodash/fp\";\r\n\r\nimport * as types from \"../actions/types\";\r\nimport { mock_locationAutocomplete } from \"../apiRequests\";\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  suggestedLocations: [],\r\n  errorMessage: \"\",\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.GET_LOCATION_AUTOCOMPLETE.START: {\r\n      const newState = flow([set('isLoading', true), set('errorMessage', '')])(state);\r\n      return newState;\r\n    }\r\n    case types.GET_LOCATION_AUTOCOMPLETE.RESOLVED: {\r\n      const newState = flow([\r\n        set(\"isLoading\", false),\r\n        set('errorMessage', ''),\r\n        set(\"suggestedLocations\", action.payload),\r\n      ])(state);\r\n       return newState;\r\n    }\r\n    case types.GET_LOCATION_AUTOCOMPLETE.ERROR: {\r\n      return flow([\r\n        set(\"isLoading\", false),\r\n        set(\"errorMessage\", get(\"errorMessage\", action)),\r\n      ])(state);\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const TABS = {\r\n    HOME: 'Home',\r\n    FAVORITES: 'Favorites'\r\n};\r\n\r\nexport const APP_TITLE = \"Herolo Weather\";\r\n\r\nexport const DAY_TIME = {\r\n    DAY: 'Day',\r\n    NIGHT: 'Night'\r\n};\r\n\r\nexport const UNIT_TYPE = {\r\n    FAHRENHEIT: 'Fahrenheit',\r\n    CELSIUS: 'Celsius'\r\n};\r\n","import { flow } from \"lodash/fp\";\r\nimport { UNIT_TYPE } from \"../constants/titles\";\r\n\r\nconst convertToF = (value) => (9 / 5) * value + 32;\r\n\r\nconst convertToC = (value) => ((value - 32) * 5) / 9;\r\n\r\nconst roundToOneDecimalNumberAfterPoint = (number) =>\r\n  Math.round(number * 10) / 10;\r\n\r\nexport const convertDegreeValue = (dest, value) => {\r\n  switch (dest) {\r\n    case UNIT_TYPE.FAHRENHEIT:\r\n      return flow([convertToF, roundToOneDecimalNumberAfterPoint])(value);\r\n    case UNIT_TYPE.CELSIUS:\r\n      return flow([convertToC, roundToOneDecimalNumberAfterPoint])(value);\r\n    default:\r\n      return value;\r\n  }\r\n};\r\n","import { set, flow, get, map } from \"lodash/fp\";\r\n\r\nimport { convertDegreeValue } from \"../utils/degrees\";\r\nimport * as types from \"../actions/types\";\r\nimport { UNIT_TYPE } from \"../constants/titles\";\r\nimport { mock_dailyForcast } from \"../apiRequests\";\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  weatherForcast: [],\r\n  cityName: \"\",\r\n  description: \"\",\r\n  errorMessage: \"\",\r\n  fetchForcast: false,\r\n};\r\n\r\nconst onDailyForcast = (payload, meta) =>\r\n  flow([\r\n    set(\"isLoading\", false),\r\n    set(\"fetchForcast\", false),\r\n    set(\"errorMessage\", \"\"),\r\n    set(\r\n      \"weatherForcast\",\r\n      map(\r\n        ({ Date, Day, Night, Temperature }) => ({\r\n          date: Date,\r\n          Day,\r\n          Night,\r\n          temperature: {\r\n            unit:\r\n              get([\"Maximum\", \"Unit\"], Temperature) === \"C\"\r\n                ? UNIT_TYPE.CELSIUS\r\n                : UNIT_TYPE.FAHRENHEIT,\r\n            max: get([\"Maximum\", \"Value\"], Temperature),\r\n            min: get([\"Minimum\", \"Value\"], Temperature),\r\n          },\r\n        }),\r\n        get(\"DailyForecasts\", payload)\r\n      )\r\n    ),\r\n    set(\"cityName\", get(\"cityName\", meta)),\r\n    set(\"cityId\", get(\"cityId\", meta)),\r\n    set(\"description\", get([\"Headline\", \"Text\"], payload)),\r\n  ]);\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.GET_DAILY_FORCAST.START: {\r\n      const newState = flow([\r\n        set(\"isLoading\", true),\r\n        set(\"fetchForcast\", true),\r\n        set(\"errorMessage\", \"\"),\r\n      ])(state);\r\n      return newState;\r\n    }\r\n    case types.GET_DAILY_FORCAST.RESOLVED: {\r\n      const { meta, payload } = action;\r\n      const newState = onDailyForcast(payload, meta)(state);\r\n      return newState;\r\n    }\r\n    case types.GET_DAILY_FORCAST.ERROR:\r\n    case types.SET_INITIAL_FORCAST.ERROR: {\r\n      return flow([\r\n        set(\"errorMessage\", action.errorMessage),\r\n        set(\"isLoading\", false),\r\n        set(\"fetchForcast\", false),\r\n      ])(state);\r\n    }\r\n    case types.SET_DEGREE_UNIT_TYPE: {\r\n      const unitType = get(\"unitType\", action.payload);\r\n      const mapTemperature = (weatherItem) =>\r\n        set(\r\n          \"temperature\",\r\n          {\r\n            unit: unitType,\r\n            max: convertDegreeValue(\r\n              unitType,\r\n              get([\"temperature\", \"max\"], weatherItem)\r\n            ),\r\n            min: convertDegreeValue(\r\n              unitType,\r\n              get([\"temperature\", \"min\"], weatherItem)\r\n            ),\r\n          },\r\n          weatherItem\r\n        );\r\n      const weatherForcast = map(mapTemperature, state.weatherForcast);\r\n\r\n      return set(\"weatherForcast\", weatherForcast, state);\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import { get, set } from \"lodash/fp\";\r\nimport {UNIT_TYPE, DAY_TIME} from '../constants/titles';\r\nimport * as types from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  unitType: UNIT_TYPE.CELSIUS\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.SET_DEGREE_UNIT_TYPE: {\r\n      return set(\"unitType\", get(\"unitType\", action.payload), state);\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import { set, get, isArray } from \"lodash/fp\";\r\nimport * as types from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  favorites: null,\r\n};\r\n\r\nconst mapFavoriteWeather = (recivedWeather) => ({\r\n    iconId: get(\"WeatherIcon\", recivedWeather),\r\n    currentTemperature: get(\"ApparentTemperature\", recivedWeather),\r\n    windSpeed: `${get(\r\n      [\"Wind\", \"Speed\", \"Metric\", \"Value\"],\r\n      recivedWeather\r\n    )} ${get([\"Wind\", \"Speed\", \"Metric\", \"Unit\"], recivedWeather)}`,\r\n    windDirction: get([\"Wind\", \"Direction\", \"Localized\"], recivedWeather),\r\n    weatherTitle: get(\"WeatherText\", recivedWeather),\r\n    tempratureSummary: {\r\n      min: get(\r\n        [\"TemperatureSummary\", \"Past24HourRange\", \"Minimum\"],\r\n        recivedWeather\r\n      ),\r\n      max: get(\r\n        [\"TemperatureSummary\", \"Past24HourRange\", \"Maximum\"],\r\n        recivedWeather\r\n      ),\r\n    },\r\n    visibilty: `${get([\"Visibility\", \"Metric\", \"Value\"], recivedWeather)} ${get(\r\n      [\"Visibility\", \"Metric\", 'Unit'],\r\n      recivedWeather\r\n    )}`,\r\n})\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.ADD_TO_FAVORITES.RESOLVED: {\r\n      const { payload, meta } = action;\r\n      const cityName = get(\"cityName\", meta);\r\n\r\n      if (cityName && typeof cityName === \"string\") {\r\n        return set(\r\n          [\"favorites\", cityName],\r\n          {\r\n            cityId: get(\"cityId\", meta),\r\n            cityName,\r\n            ...mapFavoriteWeather(isArray(payload) ? payload[0] : payload),\r\n          },\r\n          state\r\n        );\r\n      }\r\n      return state;\r\n    }\r\n    case types.ADD_TO_FAVORITES.ERROR: {\r\n      return state;\r\n    }\r\n    case types.REMOVE_FROM_FAVORITES: {\r\n      const { cityName } = action.payload;\r\n      const { favorites } = state;\r\n\r\n      if (cityName && typeof cityName === \"string\") delete favorites[cityName];\r\n\r\n      const newState = set(\"favorites\", { ...favorites }, state);\r\n      return newState;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport weather from \"./weatherReducer\";\r\nimport forcast from './forcastReducer';\r\nimport config from './configReducer';\r\nimport favorites from './favoritesReducer';\r\n\r\nexport default combineReducers({ weather, forcast, config, favorites });","import { get } from \"lodash/fp\";\r\n\r\nconst asyncMiddleware = (store) => (next) => (action) => {\r\n  const httpAction = get(\"HTTP_ACTION\", action);\r\n  \r\n  if (!httpAction) {\r\n    return next(action);\r\n  }\r\n\r\n  const { endpoint, meta } = httpAction;\r\n\r\n  next({ type: httpAction.type.START});\r\n\r\n  endpoint()\r\n    .then((data) => {\r\n      store.dispatch({\r\n        type: httpAction.type.RESOLVED,\r\n        payload: data,\r\n        meta\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      store.dispatch({\r\n        type: httpAction.type.ERROR,\r\n        errorMessage: httpAction.errorMessage\r\n      });\r\n    });\r\n};\r\n\r\nexport default asyncMiddleware;\r\n","const logger = (store) => (next) => (action) => {\r\n  console.log(\"dispatching\", action);\r\n  console.log(\"prev state\", store.getState());\r\n  return next(action);\r\n};\r\nexport default logger;","const httpAction = (action) => {\r\n  const httpRequestTemplate = {\r\n    endpoint: null,\r\n    payload: null,\r\n    type: \"\",\r\n  };\r\n\r\n  return { HTTP_ACTION: Object.assign(httpRequestTemplate, action) };\r\n};\r\n\r\nexport default httpAction;\r\n","import { set } from \"lodash/fp\";\r\nimport * as types from \"./types\";\r\nimport httpAction from \"./httpRquest\";\r\nimport * as weatherRequestsApi from \"../apiRequests\";\r\n\r\nexport const getDailyForcast = ({ cityId, metric }, meta = {}) =>\r\n         httpAction({\r\n           type: types.GET_DAILY_FORCAST,\r\n           endpoint: weatherRequestsApi.getDailyForcast(cityId, metric),\r\n           meta: set(\"cityId\", cityId, meta),\r\n           errorMessage:\r\n             \"Something went wrong... Faild to fetch daily forcast.\",\r\n         });\r\n\r\nexport const getLocationCurrentWeather = (locationId, meta = {}) =>\r\n         httpAction({\r\n           type: types.GET_CURRENT_WEATHER,\r\n           endpoint: weatherRequestsApi.getLocationCurrentWeather(locationId),\r\n           meta,\r\n           errorMessage: \"Something went wrong... Faild to fetch weather info.\",\r\n         });\r\n\r\nexport const getLocationAutocomplete = (locationQuery, meta = {}) =>\r\n         httpAction({\r\n           type: types.GET_LOCATION_AUTOCOMPLETE,\r\n           endpoint: weatherRequestsApi.getLocationAutocomplete(locationQuery),\r\n           meta,\r\n           errorMessage:\r\n             \"Something went wrong... Faild to fetch location options.\",\r\n         });\r\n\r\nexport const setInitialForcast = (meta = {}) =>\r\n  httpAction({\r\n    type: types.SET_INITIAL_FORCAST,\r\n    endpoint: weatherRequestsApi.getLocationAutocomplete(\"Tel Aviv\"),\r\n    meta,\r\n    errorMessage: \"Something went wrong... Faild to load forcast.\",\r\n  });\r\n","import { get } from \"lodash/fp\";\r\nimport * as types from \"../actions/types\";\r\nimport { getDailyForcast } from \"../actions/weather\";\r\n\r\nconst initialForcast = (store) => (next) => (action) => {\r\n  const actionType = get(\"type\", action);\r\n  if (actionType !== types.SET_INITIAL_FORCAST.RESOLVED) {\r\n    return next(action);\r\n  }\r\n  const cityId = get([\"payload\", \"0\", \"Key\"], action);\r\n  const { meta } = action;\r\n\r\n  store.dispatch(\r\n    getDailyForcast(\r\n      { cityId, metric: get(\"metric\", meta) },\r\n      get(\"meta\", action)\r\n    )\r\n  );\r\n};\r\n\r\nexport default initialForcast;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/root';\r\nimport asyncMiddleware from './middlewares/asyncMiddleware';\r\nimport loggerMiddelware from './middlewares/loggerMiddleware';\r\nimport initialForcasrMiddleware from './middlewares/initialForcastMiddleware';\r\n\r\nconst configureStore = (initialState = {}) =>\r\n  createStore(\r\n    rootReducer,\r\n    initialState,\r\n    applyMiddleware(loggerMiddelware, asyncMiddleware, initialForcasrMiddleware)\r\n  );\r\n\r\nexport default configureStore;","import styled from \"styled-components\";\r\n\r\nconst Flexbox = styled.div`\r\n  display: flex;\r\n  flex-direction: ${({ flexDirection }) => flexDirection || \"row\"};\r\n  width: ${({ width }) => width || \"auto\"};\r\n  height: ${({ height }) => height || \"auto\"};\r\n`;\r\n\r\nexport default Flexbox;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { isFunction } from \"lodash/fp\";\r\nimport { FormControlLabel, Switch } from \"@material-ui/core\";\r\n\r\nexport default function SwitchLabels({\r\n  checkedLabel,\r\n  uncheckedLabel,\r\n  afterChange,\r\n}) {\r\n  const [state, setState] = useState({\r\n    checked: true,\r\n    label: checkedLabel,\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    const { checked } = event.target;\r\n    const label = checked ? checkedLabel : uncheckedLabel;\r\n    if (isFunction(afterChange)) {\r\n      afterChange(label);\r\n    }\r\n    setState({\r\n      checked,\r\n      label,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <FormControlLabel\r\n      control={\r\n        <Switch\r\n          checked={state.checked}\r\n          onChange={handleChange}\r\n          name=\"checked\"\r\n          color=\"primary\"\r\n        />\r\n      }\r\n      label={state.label}\r\n    />\r\n  );\r\n}\r\n\r\nSwitchLabels.propTypes = {\r\n  checkedLabel: PropTypes.string,\r\n  uncheckedLabel: PropTypes.string,\r\n  afterChange: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport { UNIT_TYPE } from \"../constants/titles\";\r\nimport * as configActions from '../actions/config';\r\n\r\nimport SwitchLabels from \"./SwitchLabels\";\r\n\r\nconst Config = ({ setUnitType }) => {\r\n    return (\r\n      <SwitchLabels\r\n        afterChange={setUnitType}\r\n        checkedLabel={UNIT_TYPE.CELSIUS}\r\n        uncheckedLabel={UNIT_TYPE.FAHRENHEIT}\r\n      />\r\n    );\r\n};\r\n\r\nexport default connect(null, {\r\n  setUnitType: configActions.setUnitType,\r\n})(Config);","import * as types from \"./types\";\r\n\r\nexport const setUnitType = (unitType) => ({\r\n  type: types.SET_DEGREE_UNIT_TYPE,\r\n  payload: {\r\n    unitType,\r\n  },\r\n});\r\n\r\nexport const setDayTime = (dayTime) => ({\r\n  type: types.SET_DAY_TIME,\r\n  payload: {\r\n    dayTime,\r\n  },\r\n});\r\n","import styled from 'styled-components';\r\nimport Flexbox from \"../Flexbox\";\r\n\r\nconst Container = styled(Flexbox)`\r\n  justify-content: space-between;\r\n  height: 80px;\r\n  background: linear-gradient(\r\n    90deg,\r\n    rgba(84, 84, 171, 1) 0%,\r\n    rgba(0, 0, 0, 1) 0%,\r\n    rgba(7, 7, 11, 1) 100%,\r\n    rgba(11, 219, 244, 1) 100%\r\n  );\r\n\r\n  .MuiTabs-root {\r\n    height: 80px;\r\n  }\r\n  .MuiTabs-flexContainer {\r\n    height: 100%;\r\n    a {\r\n      color: #fff;\r\n      text-decoration: none;\r\n      text-transform: capitalize;\r\n    }\r\n  }\r\n  .title {\r\n    width: fit-content;\r\n    height: fit-content;\r\n    color: #fff;\r\n    margin: auto 0 auto 30px;\r\n  }\r\n  .MuiTypography-body1 {\r\n    color: #fff;\r\n  }\r\n  .Config {\r\n    margin: auto 0 auto 10px;\r\n  }\r\n  .MuiFormControlLabel-root {\r\n    margin-left: 50px;\r\n  }\r\n  .dropdown {\r\n    position: relative;\r\n    display: inline-block;\r\n  }\r\n\r\n  .dropdown-content {\r\n    display: none;\r\n    position: absolute;\r\n    background-color: #f1f1f1;\r\n    min-width: 160px;\r\n    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\r\n    z-index: 1;\r\n    right: 0px;\r\n    top: 80px;\r\n    .MuiTypography-body1 {\r\n      color: black;\r\n    }\r\n  }\r\n\r\n  .dropdown-content a {\r\n    color: black;\r\n    padding: 12px 16px;\r\n    text-decoration: none;\r\n    display: block;\r\n  }\r\n  .dropdown-content a:hover {\r\n    background-color: #ddd;\r\n  }\r\n\r\n  .dropdown:hover .dropdown-content {\r\n    display: block;\r\n  }\r\n\r\n  .with-dropdown {\r\n    justify-content: space-between;\r\n  }\r\n  .MuiSvgIcon-root {\r\n    color: white;\r\n    width: 68px;\r\n    height: 34px;\r\n    margin-top: 24px;\r\n  }\r\n  .left-container-collapse {\r\n    .MuiFormControlLabel-root {\r\n      margin-left: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Container;","import React, { useState } from \"react\";\r\n\r\nimport _ from \"lodash\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Tabs, Tab, Typography } from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nimport { TABS, APP_TITLE } from \"../../constants/titles\";\r\nimport { useWindowSize } from \"../../utils/hooks\";\r\nimport Flexbox from \"../Flexbox\";\r\nimport Config from \"../Config\";\r\nimport Container from './styled-components';\r\n\r\nconst pathCode = {\r\n  \"\": 0,\r\n  favorites: 1,\r\n};\r\n\r\nexport default function Nevigationbar() {\r\n  const { width } = useWindowSize();\r\n  const windowLocationPathName = _.trim(window.location.pathname, \"/\");\r\n  const pathCodeValue = _.get(pathCode, windowLocationPathName) || 0;\r\n\r\n  const [value, setValue] = useState(pathCodeValue);\r\n\r\n  const handleChange = (_, newValue) => setValue(newValue);\r\n\r\n  const dropDownMenu = (\r\n    <div className=\"dropdown\">\r\n      <MenuIcon />\r\n      <div className=\"dropdown-content\">\r\n        <Link to=\"/\">\r\n          <Typography>{TABS.HOME}</Typography>\r\n        </Link>\r\n        <Link to=\"/favorites\">\r\n          <Typography>{TABS.FAVORITES}</Typography>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  if (width >= 487) {\r\n    return (\r\n      <Container>\r\n        <Flexbox>\r\n          <Typography className=\"title\">{APP_TITLE}</Typography>\r\n          <Config className=\"Config\" />\r\n        </Flexbox>\r\n        <Tabs value={value} onChange={handleChange}>\r\n          <Tab label={<Link to=\"/\">{TABS.HOME}</Link>} />\r\n          <Tab label={<Link to=\"/favorites\">{TABS.FAVORITES}</Link>} />\r\n        </Tabs>\r\n      </Container>\r\n    );\r\n  }\r\n  return (\r\n    <Container>\r\n      <Flexbox className=\"left-container-collapse\">\r\n        <Typography className=\"title\">{APP_TITLE}</Typography>\r\n        <Config />\r\n      </Flexbox>\r\n      {dropDownMenu}\r\n    </Container>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const useWindowSize = () => {\r\n  const isClient = typeof window === \"object\";\r\n\r\n  function getSize() {\r\n    return {\r\n      width: isClient ? window.innerWidth : undefined,\r\n      height: isClient ? window.innerHeight : undefined,\r\n    };\r\n  }\r\n\r\n  const [windowSize, setWindowSize] = useState(getSize);\r\n\r\n  useEffect(() => {\r\n    if (!isClient) {\r\n      return false;\r\n    }\r\n\r\n    function handleResize() {\r\n      setWindowSize(getSize());\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowSize;\r\n}\r\n","import React from 'react';\r\nimport PropTypes  from 'prop-types';\r\n\r\nimport { Typography } from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\n\r\nconst Toast = ({severity, context}) => {\r\n    return (\r\n      <Alert severity={severity}>\r\n        <Typography>{context}</Typography>\r\n      </Alert>\r\n    );\r\n};\r\n\r\nToast.propTypes = {\r\n  severity: PropTypes.oneOf([\"success\", \"error\"]),\r\n  context: PropTypes.any.isRequired\r\n};\r\n\r\nToast.defaultProps = {\r\n  severity: 'error'\r\n};\r\n\r\nexport default Toast;","import styled from \"styled-components\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Toast from \"../../components/Toast\";\r\n\r\nexport const StyledAutocomplete = styled(Autocomplete)`\r\n         width: fit-content;\r\n         margin: 0 auto;\r\n         .MuiFormControl-fullWidth {\r\n           width: 800px;\r\n           @media screen and (max-width: 1024px) {\r\n             width: 800px;\r\n           }\r\n           @media screen and (max-width: 900px) {\r\n             width: 600px;\r\n           }\r\n\r\n           @media screen and (max-width: 646px) {\r\n             width: 500px;\r\n           }\r\n           @media screen and (max-width: 560px) {\r\n             width: 363px;\r\n             margin: 0 auto;\r\n             margin-top: 20px;\r\n           }\r\n           @media screen and (max-width: 430px) {\r\n             width: 300px;\r\n             margin: 0 auto;\r\n             margin-top: 20px;\r\n           }\r\n           @media screen and (max-width: 375px) {\r\n             width: 236px;\r\n             margin: 0 auto;\r\n             margin-top: 20px;\r\n           }\r\n           @media screen and (max-width: 260px) {\r\n             width: 215px;\r\n    \r\n           }\r\n         }\r\n       `;\r\n\r\nexport const ToastContainer = styled.div`\r\n  .MuiAlert-standardError {\r\n    width: 306px;\r\n    margin-left: 277px;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { get, debounce, map, find } from \"lodash/fp\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport { UNIT_TYPE } from \"../../constants/titles\";\r\nimport * as weatherActions from \"../../actions/weather\";\r\n\r\nimport Toast from \"./../../components/Toast\";\r\nimport { StyledAutocomplete, ToastContainer } from \"./styled-components\";\r\n\r\nconst mapOption = (option) => get(\"cityName\", option);\r\n\r\nconst allowdInputValue = (value) => {\r\n  return value ? /^[a-zA-Z\\s]+$/.test(value) : true;\r\n};\r\n\r\nconst SerachInput = ({\r\n  options,\r\n  placeholder,\r\n  getLocationAutocomplete,\r\n  getDailyForcast,\r\n  unitType,\r\n}) => {\r\n  const [notValid, setNotValid] = useState(false);\r\n\r\n  const handleInputChange = (_, value) => {\r\n    \r\n    const isValid = allowdInputValue(value);\r\n\r\n    if (!isValid) {\r\n      setNotValid(true);\r\n    } else {\r\n      setNotValid(false);\r\n      if (value) {\r\n        const location = find(\r\n          (option) => value === get(\"cityName\", option),\r\n          options\r\n        );\r\n        if (location) {\r\n          getDailyForcast(\r\n            {\r\n              cityId: get(\"cityId\", location),\r\n              metric: unitType === UNIT_TYPE.CELSIUS,\r\n            },\r\n            {\r\n              cityName: get(\"cityName\", location),\r\n            }\r\n          );\r\n        } else {\r\n          getLocationAutocomplete(value);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const onInputChange = debounce(2000, handleInputChange);\r\n\r\n  const renderInput = (params) => (\r\n    <TextField\r\n      placeholder={placeholder}\r\n      {...params}\r\n      margin=\"normal\"\r\n      variant=\"outlined\"\r\n    />\r\n  );\r\n\r\n  return (\r\n      <>\r\n      <StyledAutocomplete\r\n        freeSolo\r\n        options={map(mapOption, options)}\r\n        onInputChange={onInputChange}\r\n        renderInput={renderInput}\r\n      />\r\n      {notValid && (\r\n        <ToastContainer>\r\n          <Toast context=\"Please search in english letters only.\" />\r\n        </ToastContainer>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nSerachInput.propTypes = {\r\n  options: PropTypes.array,\r\n  placeholder: PropTypes.string,\r\n  getLocationAutocomplete: PropTypes.func.isRequired,\r\n  getDailyForcast: PropTypes.func.isRequired,\r\n};\r\n\r\nSerachInput.defaultProps = {\r\n  options: [],\r\n  placeholder: \"Search City\",\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const options = (get([\"weather\", \"suggestedLocations\"], state) || []).map(\r\n    (option) => ({\r\n      cityName: get([\"AdministrativeArea\", \"LocalizedName\"], option),\r\n      cityId: get(\"Key\", option),\r\n    })\r\n  );\r\n\r\n  const unitType = get([\"config\", \"unitType\"], state);\r\n\r\n  return {\r\n    options,\r\n    unitType,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  getLocationAutocomplete: weatherActions.getLocationAutocomplete,\r\n  getDailyForcast: weatherActions.getDailyForcast,\r\n})(SerachInput);\r\n","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\n\r\nimport Flexbox from \"../components/Flexbox\";\r\n\r\nconst ForcastSkelaton = () => {\r\n  return (\r\n    <SkelatonContainer flexDirection=\"column\">\r\n      <Skeleton\r\n        className=\"Skeleton-text\"\r\n        variant=\"text\"\r\n        width={127}\r\n        height={24}\r\n      />\r\n      <Skeleton\r\n        className=\"Skeleton-text\"\r\n        variant=\"text\"\r\n        width={264}\r\n        height={24}\r\n      />\r\n      <Skeleton\r\n        className=\"Skeleton-text\"\r\n        variant=\"text\"\r\n        width={450}\r\n        height={24}\r\n      />\r\n      <SkelatonWeatherContainer>\r\n        <Skeleton\r\n          className=\"Skeleton-weather\"\r\n          variant=\"rect\"\r\n          width={100}\r\n          height={170}\r\n        />\r\n        <Skeleton\r\n          className=\"Skeleton-weather\"\r\n          variant=\"rect\"\r\n          width={100}\r\n          height={170}\r\n        />\r\n        <Skeleton\r\n          className=\"Skeleton-weather\"\r\n          variant=\"rect\"\r\n          width={100}\r\n          height={170}\r\n        />\r\n        <Skeleton\r\n          className=\"Skeleton-weather\"\r\n          variant=\"rect\"\r\n          width={100}\r\n          height={170}\r\n        />\r\n        <Skeleton\r\n          className=\"Skeleton-weather\"\r\n          variant=\"rect\"\r\n          width={100}\r\n          height={170}\r\n        />\r\n      </SkelatonWeatherContainer>\r\n    </SkelatonContainer>\r\n  );\r\n};\r\n\r\nconst SkelatonContainer = styled(Flexbox)`\r\n  width: 800px;\r\n  margin: 40px auto auto auto;\r\n  .MuiSkeleton-pulse {\r\n    border-radius: 5px;\r\n  }\r\n  .Skeleton-weather {\r\n    margin: 0px 27px;\r\n  }\r\n  .Skeleton-text {\r\n    margin: 0 auto;\r\n  }\r\n`;\r\n\r\nconst SkelatonWeatherContainer = styled(Flexbox)`\r\n  margin-top: 40px;\r\n`;\r\n\r\nexport default ForcastSkelaton;\r\n","import styled from \"styled-components\";\r\n\r\nconst Icon = styled.div`\r\n  background-image: url(${(props) => `src/icons/${props.img}.png`});\r\n  width: ${({ width }) => width || \"75px\"};\r\n  height: ${({ height }) => height || \"45px\"};\r\n`;\r\n\r\nexport default Icon;","import styled from \"styled-components\";\r\n\r\nimport Flexbox from \"../../components/Flexbox\";\r\n\r\nexport const WeatherItemContainer = styled(Flexbox)`\r\n  flex-wrap: wrap;\r\n  margin: 15px 30px 20px;\r\n  border-radius: 5px;\r\n  box-shadow: -3px 6px 41px 8px rgba(192, 206, 206, 0.49);\r\n  width: 120px;\r\n  height: 150px;\r\n  align-items: center;\r\n  padding-top: 20px;\r\n  .description {\r\n    white-space: nowrap;\r\n    width: 50px;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    max-width: 55px;\r\n  }\r\n`;\r\n\r\nexport const Container = styled(Flexbox)`\r\n  height: 209px;\r\n  justify-content: center;\r\n  @media screen and (max-width: 890px) {\r\n    flex-wrap: wrap;\r\n  }\r\n  @media screen and (max-width: 375px) {\r\n    flex-wrap: wrap;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { get } from \"lodash/fp\";\r\nimport { Typography, Tooltip } from \"@material-ui/core\";\r\n\r\nimport Icon from \"../../components/Icon\";\r\nimport { WeatherItemContainer, Container } from \"./styled-components\";\r\n\r\nconst WeeklyForcast = ({ weatherForcast, dayTime }) => {\r\n  const mapWeather = (weather, index) => {\r\n    const minTemperature = get([\"temperature\", \"min\"], weather);\r\n    const maxTemperature = get([\"temperature\", \"max\"], weather);\r\n    const description = get([dayTime, \"IconPhrase\"], weather);\r\n    const iconId = get([dayTime, \"Icon\"], weather);\r\n\r\n    return (\r\n      <WeatherItemContainer\r\n        flexDirection=\"column\"\r\n        key={`${index}-${minTemperature}-${maxTemperature}`}\r\n      >\r\n        <Icon img={iconId} />\r\n        <Tooltip title={description}>\r\n          <Typography className=\"description\">{description}</Typography>\r\n        </Tooltip>\r\n        <Typography>{`${minTemperature} / ${maxTemperature}`}</Typography>\r\n      </WeatherItemContainer>\r\n    );\r\n  };\r\n\r\n  return <Container>{weatherForcast.map(mapWeather)}</Container>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  weatherForcast: get([\"forcast\", \"weatherForcast\"], state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(WeeklyForcast);\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { isFunction } from \"lodash/fp\";\r\n\r\nconst ToggledComponent = ({\r\n  initialValue,\r\n  OnComponent,\r\n  OffComponent,\r\n  onClick,\r\n}) => {\r\n  const [toggle, setToggle] = useState(initialValue);\r\n  const _setToggle = () => {\r\n    setToggle(!toggle);\r\n    if (isFunction(onClick)) {\r\n      onClick(!toggle);\r\n    }\r\n  };\r\n\r\n  const Component = toggle ? OnComponent : OffComponent;\r\n  return <Component onClick={_setToggle} />;\r\n};\r\n\r\nToggledComponent.propTypes = {\r\n  initialValue: PropTypes.bool,\r\n  OnComponent: PropTypes.any,\r\n  OffComponent: PropTypes.any,\r\n  onClick: PropTypes.func\r\n};\r\n\r\nexport default ToggledComponent;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { get } from \"lodash/fp\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\n\r\nimport * as favoritesActions from \"../../actions/favorites\";\r\n\r\nimport ToggledComponent from \"../../components/ToggledComponent\";\r\n\r\nconst FavoriteAction = ({\r\n  cityId,\r\n  cityName,\r\n  addToFavorites,\r\n  removeFromFavorites,\r\n  isFavorite,\r\n}) => {\r\n  const onClick = (toggledValue) => {\r\n    if (toggledValue) {\r\n      addToFavorites({\r\n        cityName,\r\n        cityId,\r\n      });\r\n    } else {\r\n      removeFromFavorites(cityName);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ToggledComponent\r\n      initialValue={isFavorite}\r\n      onClick={onClick}\r\n      OnComponent={FavoriteIcon}\r\n      OffComponent={FavoriteBorderIcon}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const cityName = get([\"forcast\", \"cityName\"], state);\r\n  const isFavorite = !!get([\"favorites\", \"favorites\", cityName], state);\r\n  return {\r\n    cityId: get([\"forcast\", \"cityId\"], state),\r\n    cityName,\r\n    isFavorite,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  addToFavorites: favoritesActions.addToFavorites,\r\n  removeFromFavorites: favoritesActions.removeFromFavorites,\r\n})(FavoriteAction);\r\n","import * as types from \"./types\";\r\nimport httpAction from \"./httpRquest\";\r\nimport * as weatherRequestsApi from \"../apiRequests\";\r\n\r\nexport const addToFavorites = ({ cityId, cityName }) =>\r\n  httpAction({\r\n    type: types.ADD_TO_FAVORITES,\r\n    endpoint: weatherRequestsApi.getLocationCurrentWeather(cityId),\r\n    meta: {\r\n      cityId,\r\n      cityName,\r\n    },\r\n  });\r\n\r\nexport const removeFromFavorites = (cityName) => ({\r\n  type: types.REMOVE_FROM_FAVORITES,\r\n  payload: {\r\n    cityName,\r\n  },\r\n});\r\n","import styled from \"styled-components\";\r\nimport Flexbox from \"../../components/Flexbox\";\r\n\r\nexport const Container = styled(Flexbox)`\r\n         width: 800px;\r\n         margin: 40px auto auto auto;\r\n\r\n         border-radius: 10px;\r\n\r\n         box-shadow: -3px 6px 41px 8px rgba(28, 30, 30, 0.49);\r\n         background-color: white;\r\n\r\n         .MuiAlert-standardError {\r\n           height: 80px;\r\n           width: 100%;\r\n           margin-top: 64px;\r\n         }\r\n         .MuiTypography-body1 {\r\n           margin: 0 auto;\r\n           color: #0c0505;\r\n         }\r\n         .title {\r\n           font-size: larger;\r\n           font-weight: 600;\r\n           height: 28px;\r\n           margin-top: 24px;\r\n         }\r\n         .description,\r\n         .time,\r\n         .title {\r\n           white-space: nowrap;\r\n           width: 500px;\r\n           overflow: hidden;\r\n           text-overflow: ellipsis;\r\n         }\r\n         @media screen and (max-width: 1024px) {\r\n           width: 800px;\r\n           margin: 0 auto;\r\n         }\r\n         @media screen and (max-width: 900px) {\r\n           width: 600px;\r\n           margin: 0 auto;\r\n           overflow-y: auto;\r\n           &::-webkit-scrollbar {\r\n             width: 15px;\r\n             border-radius: 5px;\r\n           }\r\n\r\n           &::-webkit-scrollbar-track {\r\n             box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n           }\r\n\r\n           &::-webkit-scrollbar-thumb {\r\n             background-color: darkgrey;\r\n             outline: 1px solid slategrey;\r\n           }\r\n         }\r\n         @media screen and (max-width: 646px) {\r\n           width: 500px;\r\n           .description,\r\n           .time,\r\n           .title {\r\n             white-space: nowrap;\r\n             width: 400px;\r\n             overflow: hidden;\r\n             text-overflow: ellipsis;\r\n           }\r\n         }\r\n         @media screen and (max-width: 560px) {\r\n           width: 360px;\r\n           margin-top: 22px;\r\n           .description,\r\n           .time,\r\n           .title {\r\n             white-space: nowrap;\r\n             width: 242px;\r\n             overflow: hidden;\r\n             text-overflow: ellipsis;\r\n           }\r\n         }\r\n         @media screen and (max-width: 430px) {\r\n           width: 300px;\r\n           .description,\r\n           .time,\r\n           .title {\r\n             white-space: nowrap;\r\n             width: 200px;\r\n             overflow: hidden;\r\n             text-overflow: ellipsis;\r\n           }\r\n         }\r\n         @media screen and (max-width: 375px) {\r\n           width: 236px;\r\n           .description,\r\n           .time,\r\n           .title {\r\n             white-space: nowrap;\r\n             width: 170px;\r\n             overflow: hidden;\r\n             text-overflow: ellipsis;\r\n           }\r\n         }\r\n         @media screen and (max-width: 260px) {\r\n           width: 215px;\r\n           .description,\r\n           .time,\r\n           .title {\r\n             white-space: nowrap;\r\n             width: 120px;\r\n             overflow: hidden;\r\n             text-overflow: ellipsis;\r\n           }\r\n         }\r\n       `;\r\n\r\nexport const ActionsContainer = styled(Flexbox)`\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  margin: 30px 0;\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport moment from \"moment\";\r\nimport { get } from \"lodash/fp\";\r\nimport { Typography, Tooltip } from \"@material-ui/core\";\r\n\r\nimport { DAY_TIME, UNIT_TYPE } from \"../../constants/titles\";\r\nimport * as weatherActions from \"../../actions/weather\";\r\n\r\nimport SwitchLabels from \"../../components/SwitchLabels\";\r\nimport ForcastSkelaton from \"../../components/ForcastSkelaton\";\r\nimport Toast from '../../components/Toast';\r\n\r\nimport WeeklyForcast from \"../WeeklyForcast\";\r\nimport FavoriteAction from \"../FavoriteAction\";\r\n\r\nimport {\r\n  Container,\r\n  ActionsContainer,\r\n} from \"./styled-components\";\r\n\r\nconst Forcast = ({\r\n  setInitialForcast,\r\n  cityName,\r\n  description,\r\n  isLoading,\r\n  unitType,\r\n  fetchForcast,\r\n  errorMessage,\r\n}) => {\r\n  const [dayTime, setDayTime] = useState(DAY_TIME.DAY);\r\n  useEffect(() => {\r\n    if (!fetchForcast) {\r\n      setInitialForcast({\r\n        cityName: \"Tel Aviv\",\r\n        metric: unitType === UNIT_TYPE.CELSIUS,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  if (isLoading) return <ForcastSkelaton />;\r\n\r\n  const currentFullTime = `${moment().format(\"dddd\")} ${moment().format(\r\n    \"MMMM Do YYYY, h:mm:ss a\"\r\n  )}`;\r\n\r\n  const render = () => {\r\n    return errorMessage ? (\r\n      <Container height=\"225px\">\r\n        <Toast context={errorMessage} />\r\n      </Container>\r\n    ) : (\r\n      <Container flexDirection=\"column\">\r\n        <Tooltip title={cityName}>\r\n          <Typography className=\"title\">{cityName}</Typography>\r\n        </Tooltip>\r\n        <Tooltip title={currentFullTime}>\r\n          <Typography className=\"time\">{currentFullTime}</Typography>\r\n        </Tooltip>\r\n        <Tooltip title={description}>\r\n          <Typography className=\"description\">{description}</Typography>\r\n        </Tooltip>\r\n        <ActionsContainer>\r\n          <SwitchLabels\r\n            checkedLabel={DAY_TIME.DAY}\r\n            uncheckedLabel={DAY_TIME.NIGHT}\r\n            afterChange={setDayTime}\r\n          />\r\n          <FavoriteAction />\r\n        </ActionsContainer>\r\n        <WeeklyForcast dayTime={dayTime} />\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return render();\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  cityName: get([\"forcast\", \"cityName\"], state),\r\n  isLoading: get([\"forcast\", \"isLoading\"], state),\r\n  description: get([\"forcast\", \"description\"], state),\r\n  fetchForcast: get([\"forcast\", \"fetchForcast\"], state),\r\n  unitType: get([\"config\", \"unitType\"], state),\r\n  errorMessage: get([\"forcast\", \"errorMessage\"], state),\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  setInitialForcast: weatherActions.setInitialForcast,\r\n})(Forcast);\r\n","import React from \"react\";\r\n\r\nimport SearchInput from \"../containers/SearchInput\";\r\nimport Forcast from \"../containers/Forcast\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <>\r\n      <SearchInput />\r\n        <Forcast />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import styled, { css } from \"styled-components\";\r\nimport Flexbox from \"../../components/Flexbox\";\r\n\r\nexport const WeatherItemContainer = styled(Flexbox)`\r\n  width: 389px;\r\n  min-height: 300px;\r\n  justify-content: space-around;\r\n  margin-left: 20px;\r\n  margin-top: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: -3px 6px 41px 8px rgba(192, 206, 206, 0.49);\r\n  .title {\r\n    font-weight: 600;\r\n    margin: 10px auto 0 auto;\r\n    white-space: nowrap;\r\n    width: 100px;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n\r\n  .wind-icon {\r\n    margin: 10px auto 0 auto;\r\n  }\r\n  .wind-row {\r\n    margin: 0 auto;\r\n    width: 100%;\r\n  }\r\n  @media screen and (max-width: 800px) {\r\n    width: 250px;\r\n  }\r\n`;\r\n\r\nexport const WeatherItemRow = styled(Flexbox)`\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 33.33% 33.33% 33.33%;\r\n  margin-bottom: 30px;\r\n  @media screen and (max-width: 1240px) {\r\n    grid-template-columns: 50% 50%;\r\n  }\r\n  @media screen and (max-width: 400px) {\r\n    grid-template-columns: 100%;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport {get} from 'lodash/fp';\r\n\r\nimport { Typography, Tooltip } from \"@material-ui/core\";\r\nimport { UNIT_TYPE } from \"../../constants/titles\";\r\nimport Icon from \"../../components/Icon\";\r\n\r\nimport { WeatherItemContainer, WeatherItemRow } from \"./styled-components\";\r\n\r\nconst getWeatherData = (weatherObject, unitType = UNIT_TYPE.CELSIUS) => {\r\n  const _unitType = unitType === UNIT_TYPE.CELSIUS ? \"Metric\" : \"Imperial\";\r\n  const unit = unitType === UNIT_TYPE.CELSIUS ? \"C\" : \"F\";\r\n  const minTempreature = get(\r\n    [\"tempratureSummary\", \"min\", _unitType, \"Value\"],\r\n    weatherObject\r\n  );\r\n  const maxTemperature = get(\r\n    [\"tempratureSummary\", \"max\", _unitType, \"Value\"],\r\n    weatherObject\r\n  );\r\n  const currentTemperatureValue = get(\r\n    [\"currentTemperature\", _unitType, \"Value\"],\r\n    weatherObject\r\n  );\r\n\r\n  return {\r\n    cityName: get(\"cityName\", weatherObject),\r\n    iconId: get(\"iconId\", weatherObject),\r\n    title: get(\"weatherTitle\", weatherObject),\r\n    windSpeed: get(\"windSpeed\", weatherObject),\r\n    windDircection: get(\"windDirction\", weatherObject),\r\n    visibilty: get(\"visibilty\", weatherObject),\r\n    currentTemperature: `${currentTemperatureValue} ${unit}`,\r\n    temperatureSummary: `${minTempreature} / ${maxTemperature}`,\r\n  };\r\n};\r\n\r\nconst FavoriteItem = ({ weather, unitType }) => {\r\n  const {\r\n    cityName,\r\n    visibilty,\r\n    iconId,\r\n    title,\r\n    windDircection,\r\n    windSpeed,\r\n    currentTemperature,\r\n    temperatureSummary,\r\n  } = getWeatherData(weather, unitType);\r\n\r\n  return (\r\n    <WeatherItemContainer flexDirection=\"column\">\r\n      <Typography className=\"title\">{cityName}</Typography>\r\n      <WeatherItemRow>\r\n        <Tooltip title={title}>\r\n          <Typography>{title}</Typography>\r\n        </Tooltip>\r\n        <Icon img={iconId} />\r\n      </WeatherItemRow>\r\n      <WeatherItemRow>\r\n        <Tooltip title={`Feels like ${currentTemperature}`}>\r\n          <Typography>Feels like</Typography>\r\n          <Typography>{currentTemperature}</Typography>\r\n        </Tooltip>\r\n      </WeatherItemRow>\r\n      <WeatherItemRow>\r\n        <Tooltip title={`Temperatures temperatureSummary`}>\r\n          <Typography>Temperatures</Typography>\r\n          <Typography>{temperatureSummary}</Typography>\r\n        </Tooltip>\r\n      </WeatherItemRow>\r\n      <WeatherItemRow className=\"wind-row\">\r\n        <Icon width=\"57px\" height=\"58px\" img=\"wind\" />\r\n        <Tooltip title={`Wind Speed ${windSpeed}`}>\r\n          <Typography>{windSpeed}</Typography>\r\n        </Tooltip>\r\n        <Tooltip title={`Direction ${windDircection}`}>\r\n          <Typography>{windDircection}</Typography>\r\n        </Tooltip>\r\n      </WeatherItemRow>\r\n      <WeatherItemRow>\r\n        <Tooltip title={`Visibily ${visibilty}`}>\r\n          <Typography>Visibily</Typography>\r\n          <Typography>{visibilty}</Typography>\r\n        </Tooltip>\r\n      </WeatherItemRow>\r\n    </WeatherItemContainer>\r\n  );\r\n};\r\n\r\nexport default FavoriteItem;\r\n","import React, {useState} from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { get, map } from \"lodash/fp\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport { UNIT_TYPE } from \"../../constants/titles\";\r\nimport * as weatherActions from \"../../actions/weather\";\r\n\r\nimport {\r\n  Container,\r\n} from \"./styled-components\";\r\nimport FavoriteItem from \"./FavoriteItem\";\r\n\r\nconst Favorites = ({ favorites, unitType, getDailyForcast }) => {\r\n    const [isRedirect, setRedircet] = useState(false);\r\n\r\n  const onClickFavorite = (cityId, isMetric, meta = {}) => () => {\r\n      getDailyForcast({ cityId, metric: isMetric }, meta);\r\n      setRedircet(true);\r\n  }\r\n\r\n  const mapFavorite = (favoriteWeather) => {\r\n    const cityName = get(\"cityName\", favoriteWeather);\r\n    const cityId = get(\"cityId\", favoriteWeather);\r\n    const isMetric = unitType === UNIT_TYPE.CELSIUS;\r\n\r\n    return (\r\n      <div\r\n        onClick={onClickFavorite(cityId, isMetric, {\r\n          cityName,\r\n        })}\r\n        key={cityName}\r\n      >\r\n        <FavoriteItem weather={favoriteWeather} unitType={unitType} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (isRedirect)  return <Redirect to='/'/>\r\n  return <Container>{map(mapFavorite, favorites)}</Container>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  favorites: get([\"favorites\", \"favorites\"], state),\r\n  unitType: get([\"config\", \"unitType\"], state),\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getDailyForcast: weatherActions.getDailyForcast,\r\n})(Favorites);\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./components/Home\";\r\nimport Favorites from \"./containers/Favorites\";\r\n\r\nconst RouteConfig = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Home} />\r\n      <Route path=\"/favorites\" component={Favorites} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default RouteConfig;\r\n","import React from \"react\";\r\n\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\nimport styled from 'styled-components';\r\nimport NevigationBar from \"./components/Nevigationbar\";\r\nimport RouteConfig from \"./RouteConfig\";\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n`;\r\n\r\nconst Main = () => {\r\n  return (\r\n    <Router>\r\n      <Container>\r\n        <NevigationBar />\r\n        <RouteConfig />\r\n      </Container>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default Main;","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport configureStore from \"./store\";\r\nimport Main from './Main';\r\n\r\nconst App = () => {\r\n   return (\r\n       <Provider store={configureStore()}>\r\n           <Main />\r\n       </Provider>\r\n   );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport './style.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n"],"sourceRoot":""}